#!/bin/bash

#-----------------------------------------------------------
# Shell 传参实例
#-----------------------------------------------------------
echo "Shell 传参实例"
echo "执行文件名：$0"
echo "第一个参数为：$1"
echo "第二个参数：$2"

#-----------------------------------------------------------
#----------------几个处理参数的特殊字符串----------------------
#-----------------------------------------------------------
$#                #传递到脚本参数
$*                #已单个字符串显示向脚本传递的参数 如"$*"用["]括起来的情况、已"$1 $2 $3......$n"的形式输出所有参数
$$                #脚本运行的当前进程ID号
$!                #脚本运行的最后一个进程ID号
$@                #与$*相同，但是使用时加引号，并在引号中返回每个参数 如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-                #显示Shell使用的当前选项，与set命令功能相同。
$?                #显示最后命令的退出状态 0表示没有错误，其他任何值表示有错误
echo "Shell 传参实例"
echo "第一个参数为：$1"
echo "参数的个数为：$#"
echo "传递的参数作为一个字符串显示：$*"
echo "传递的参数作为一个字符串显示：$@"
echo "显示当前选项：$-"
echo "脚本运行的当前进程ID号：$$"
echo "脚本运行的最后一个进程ID号：$!"
echo "显示最后命令的退出状态：$?"

#-----------------------------------------------------------
# $* $@ 区别
# 相同点：都是引用所有参数
# 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）
#-----------------------------------------------------------
echo "-- \$* 演示 ---"
for i in "$*"; do
    echo $i
done

echo "-- \$@ 演示 ---"
for i in "$@"; do
    echo $i
done